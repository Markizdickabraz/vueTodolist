{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from '@/router/router';\nexport const AuthModule = {\n  state: () => ({\n    isLogin: false,\n    authInputValue: {\n      email: '',\n      password: ''\n    },\n    changePage: '',\n    registerOrLoginValue: '',\n    authToken: ''\n  }),\n  mutations: {\n    setIsLogin(state, value) {\n      state.isLogin = value;\n    },\n    setInputValue(state, value) {\n      state.authInputValue = value;\n    },\n    setChangePage(state, value) {\n      state.changePage = value;\n    },\n    setRegisterOrLoginValue(state, value) {\n      state.registerOrLoginValue = value;\n    },\n    setAuthToken(state, value) {\n      state.authToken = value;\n    }\n  },\n  actions: {\n    setAuthInputValue({\n      commit\n    }, value) {\n      commit('setInputValue', value);\n    },\n    setChangePage({\n      commit\n    }, value) {\n      commit('setChangePage', value);\n    },\n    setRegisterOrLoginValue({\n      commit\n    }, value) {\n      commit('setRegisterOrLoginValue', value);\n    },\n    setAuthToken({\n      commit\n    }, value) {\n      commit('setAuthToken', value);\n    },\n    async registerOrLogin({\n      state,\n      commit\n    }) {\n      try {\n        const response = await axios.post(`https://poli-back.onrender.com/api/user/${state.registerOrLoginValue}`, state.authInputValue);\n        const authToken = response.data.token;\n        commit('setIsLogin', true);\n        commit('setAuthToken', authToken);\n        localStorage.setItem('authToken', authToken);\n        router.push(state.changePage);\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n  },\n  getters: {\n    isAuthenticated(state) {\n      return !!state.authToken;\n    }\n  },\n  namespaced: true\n};","map":{"version":3,"names":["axios","router","AuthModule","state","isLogin","authInputValue","email","password","changePage","registerOrLoginValue","authToken","mutations","setIsLogin","value","setInputValue","setChangePage","setRegisterOrLoginValue","setAuthToken","actions","setAuthInputValue","commit","registerOrLogin","response","post","data","token","localStorage","setItem","push","error","console","message","getters","isAuthenticated","namespaced"],"sources":["/home/hp/Sites/vue/src/store/AuthModule.js"],"sourcesContent":["import axios from 'axios';\nimport router from '@/router/router';\n\nexport const AuthModule = {\n    state: () => ({\n        isLogin: false,\n        authInputValue: {\n            email: '',\n            password: '',\n        },\n        changePage: '',\n        registerOrLoginValue: '',\n        authToken: '',\n    }),\n    mutations: {\n        setIsLogin(state, value) {\n            state.isLogin = value;\n        },\n        setInputValue(state, value) {\n            state.authInputValue = value;\n        },\n        setChangePage(state, value) {\n            state.changePage = value;\n        },\n        setRegisterOrLoginValue(state, value) {\n            state.registerOrLoginValue = value;\n        },\n        setAuthToken(state, value) {\n            state.authToken = value;\n        }\n    },\n    actions: {\n        setAuthInputValue({ commit}, value) {\n            commit('setInputValue', value);\n        },\n\n        setChangePage({ commit }, value) {\n            commit('setChangePage', value);\n        },\n        setRegisterOrLoginValue({ commit }, value) {\n            commit('setRegisterOrLoginValue', value);\n        },\n        setAuthToken({ commit }, value) {\n            commit('setAuthToken', value);\n        },\n        async registerOrLogin({ state, commit }) {\n            try {\n                const response = await axios.post(`https://poli-back.onrender.com/api/user/${state.registerOrLoginValue}`, state.authInputValue);\n                const authToken = response.data.token;\n                commit('setIsLogin', true);\n                commit('setAuthToken', authToken);\n                localStorage.setItem('authToken', authToken);\n                router.push(state.changePage);\n            } catch (error) {\n                console.error(error.message);\n            }\n        },\n    },\n    getters: {\n        isAuthenticated(state) {\n            return !!state.authToken;\n        }\n    },\n    namespaced: true\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,OAAO,MAAMC,UAAU,GAAG;EACtBC,KAAK,EAAEA,CAAA,MAAO;IACVC,OAAO,EAAE,KAAK;IACdC,cAAc,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACd,CAAC;IACDC,UAAU,EAAE,EAAE;IACdC,oBAAoB,EAAE,EAAE;IACxBC,SAAS,EAAE;EACf,CAAC,CAAC;EACFC,SAAS,EAAE;IACPC,UAAUA,CAACT,KAAK,EAAEU,KAAK,EAAE;MACrBV,KAAK,CAACC,OAAO,GAAGS,KAAK;IACzB,CAAC;IACDC,aAAaA,CAACX,KAAK,EAAEU,KAAK,EAAE;MACxBV,KAAK,CAACE,cAAc,GAAGQ,KAAK;IAChC,CAAC;IACDE,aAAaA,CAACZ,KAAK,EAAEU,KAAK,EAAE;MACxBV,KAAK,CAACK,UAAU,GAAGK,KAAK;IAC5B,CAAC;IACDG,uBAAuBA,CAACb,KAAK,EAAEU,KAAK,EAAE;MAClCV,KAAK,CAACM,oBAAoB,GAAGI,KAAK;IACtC,CAAC;IACDI,YAAYA,CAACd,KAAK,EAAEU,KAAK,EAAE;MACvBV,KAAK,CAACO,SAAS,GAAGG,KAAK;IAC3B;EACJ,CAAC;EACDK,OAAO,EAAE;IACLC,iBAAiBA,CAAC;MAAEC;IAAM,CAAC,EAAEP,KAAK,EAAE;MAChCO,MAAM,CAAC,eAAe,EAAEP,KAAK,CAAC;IAClC,CAAC;IAEDE,aAAaA,CAAC;MAAEK;IAAO,CAAC,EAAEP,KAAK,EAAE;MAC7BO,MAAM,CAAC,eAAe,EAAEP,KAAK,CAAC;IAClC,CAAC;IACDG,uBAAuBA,CAAC;MAAEI;IAAO,CAAC,EAAEP,KAAK,EAAE;MACvCO,MAAM,CAAC,yBAAyB,EAAEP,KAAK,CAAC;IAC5C,CAAC;IACDI,YAAYA,CAAC;MAAEG;IAAO,CAAC,EAAEP,KAAK,EAAE;MAC5BO,MAAM,CAAC,cAAc,EAAEP,KAAK,CAAC;IACjC,CAAC;IACD,MAAMQ,eAAeA,CAAC;MAAElB,KAAK;MAAEiB;IAAO,CAAC,EAAE;MACrC,IAAI;QACA,MAAME,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAC,2CAA2CpB,KAAK,CAACM,oBAAoB,EAAE,EAAEN,KAAK,CAACE,cAAc,CAAC;QAChI,MAAMK,SAAS,GAAGY,QAAQ,CAACE,IAAI,CAACC,KAAK;QACrCL,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC;QAC1BA,MAAM,CAAC,cAAc,EAAEV,SAAS,CAAC;QACjCgB,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEjB,SAAS,CAAC;QAC5CT,MAAM,CAAC2B,IAAI,CAACzB,KAAK,CAACK,UAAU,CAAC;MACjC,CAAC,CAAC,OAAOqB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;MAChC;IACJ;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,eAAeA,CAAC9B,KAAK,EAAE;MACnB,OAAO,CAAC,CAACA,KAAK,CAACO,SAAS;IAC5B;EACJ,CAAC;EACDwB,UAAU,EAAE;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
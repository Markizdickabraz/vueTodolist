{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'App',\n  data() {\n    return {\n      player1: {\n        x: 100,\n        y: 100,\n        size: 50,\n        color: 'blue',\n        speed: 10,\n        isShooting: false,\n        bullets: [],\n        shootingCooldown: 0\n      },\n      player2: {\n        x: 200,\n        y: 300,\n        size: 50,\n        color: 'red',\n        speed: 5,\n        armor: 3\n      },\n      items: [],\n      itemSize: 20,\n      itemTypes: ['speed', 'armor'],\n      frameRate: 1000 / 60\n    };\n  },\n  mounted() {\n    this.initCanvas();\n    this.startGame();\n    this.generateItems();\n  },\n  methods: {\n    initCanvas() {\n      this.canvas = this.$refs.gameCanvas;\n      this.context = this.canvas.getContext('2d');\n    },\n    startGame() {\n      this.update();\n      window.addEventListener('keydown', this.handleKeyDown);\n      window.addEventListener('keyup', this.handleKeyUp);\n    },\n    handleKeyDown(event) {\n      switch (event.key) {\n        case 'w':\n          this.player1.y -= this.player1.speed;\n          break;\n        case 's':\n          this.player1.y += this.player1.speed;\n          break;\n        case 'a':\n          this.player1.x -= this.player1.speed;\n          break;\n        case 'd':\n          this.player1.x += this.player1.speed;\n          break;\n        case 'f':\n          this.player1.isShooting = true;\n          break;\n        case 'ArrowUp':\n          this.player2.y -= this.player2.speed;\n          break;\n        case 'ArrowDown':\n          this.player2.y += this.player2.speed;\n          break;\n        case 'ArrowLeft':\n          this.player2.x -= this.player2.speed;\n          break;\n        case 'ArrowRight':\n          this.player2.x += this.player2.speed;\n          break;\n      }\n    },\n    handleKeyUp(event) {\n      if (event.key === 'f') {\n        this.player1.isShooting = false;\n      }\n    },\n    update() {\n      this.clearCanvas();\n      this.moveBullets();\n      this.drawItems();\n      this.drawPlayer(this.player1);\n      this.drawPlayer(this.player2);\n      this.checkCollisions();\n      this.handleShooting();\n      this.removeExpiredItems();\n      requestAnimationFrame(this.update);\n    },\n    drawPlayer(player) {\n      this.context.fillStyle = player.color;\n      this.context.fillRect(player.x, player.y, player.size, player.size);\n    },\n    moveBullets() {\n      this.player1.bullets.forEach(bullet => {\n        bullet.x += bullet.dx;\n        bullet.y += bullet.dy;\n      });\n      this.player1.bullets = this.player1.bullets.filter(bullet => {\n        return bullet.x >= 0 && bullet.x <= this.canvas.width && bullet.y >= 0 && bullet.y <= this.canvas.height;\n      });\n    },\n    handleShooting() {\n      if (this.player1.isShooting && this.player1.shootingCooldown <= 0) {\n        this.player1.bullets.push({\n          x: this.player1.x + this.player1.size / 2,\n          y: this.player1.y,\n          dx: 0,\n          dy: -10\n        });\n        this.player1.shootingCooldown = 30; // Cooldown frame count\n      }\n      this.player1.shootingCooldown = Math.max(0, this.player1.shootingCooldown - 1);\n      this.player1.bullets.forEach(bullet => {\n        this.context.fillStyle = 'black';\n        this.context.fillRect(bullet.x, bullet.y, 5, 10);\n      });\n    },\n    checkCollisions() {\n      this.player1.bullets.forEach(bullet => {\n        if (this.isCollision(bullet, this.player2)) {\n          this.player2.armor -= 1;\n          bullet.isHit = true;\n        }\n      });\n      this.player1.bullets = this.player1.bullets.filter(bullet => !bullet.isHit);\n      this.items.forEach(item => {\n        if (this.isCollision(item, this.player1)) {\n          if (item.type === 'speed') {\n            this.player1.speed += 10;\n          } else if (item.type === 'armor') {\n            this.player2.armor += 1;\n          }\n          item.isCollected = true;\n        }\n      });\n      this.items = this.items.filter(item => !item.isCollected);\n    },\n    isCollision(obj1, obj2) {\n      return obj1.x < obj2.x + obj2.size && obj1.x + obj1.size > obj2.x && obj1.y < obj2.y + obj2.size && obj1.y + obj1.size > obj2.y;\n    },\n    generateItems() {\n      for (let i = 0; i < 10; i++) {\n        this.items.push({\n          x: Math.random() * (this.canvas.width - this.itemSize),\n          y: Math.random() * (this.canvas.height - this.itemSize),\n          size: this.itemSize,\n          type: this.itemTypes[Math.floor(Math.random() * this.itemTypes.length)]\n        });\n      }\n    },\n    drawItems() {\n      this.items.forEach(item => {\n        this.context.fillStyle = item.type === 'speed' ? 'green' : 'purple';\n        this.context.fillRect(item.x, item.y, item.size, item.size);\n      });\n    },\n    removeExpiredItems() {\n      // Cleanup items and other necessary operations can be done here\n    },\n    clearCanvas() {\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    window.removeEventListener('keyup', this.handleKeyUp);\n  }\n};","map":{"version":3,"names":["name","data","player1","x","y","size","color","speed","isShooting","bullets","shootingCooldown","player2","armor","items","itemSize","itemTypes","frameRate","mounted","initCanvas","startGame","generateItems","methods","canvas","$refs","gameCanvas","context","getContext","update","window","addEventListener","handleKeyDown","handleKeyUp","event","key","clearCanvas","moveBullets","drawItems","drawPlayer","checkCollisions","handleShooting","removeExpiredItems","requestAnimationFrame","player","fillStyle","fillRect","forEach","bullet","dx","dy","filter","width","height","push","Math","max","isCollision","isHit","item","type","isCollected","obj1","obj2","i","random","floor","length","clearRect","beforeDestroy","removeEventListener"],"sources":["src/views/Game.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <canvas ref=\"gameCanvas\" width=\"800\" height=\"600\"></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      player1: {\n        x: 100,\n        y: 100,\n        size: 50,\n        color: 'blue',\n        speed: 10,\n        isShooting: false,\n        bullets: [],\n        shootingCooldown: 0\n      },\n      player2: {\n        x: 200,\n        y: 300,\n        size: 50,\n        color: 'red',\n        speed: 5,\n        armor: 3\n      },\n      items: [],\n      itemSize: 20,\n      itemTypes: ['speed', 'armor'],\n      frameRate: 1000 / 60\n    };\n  },\n  mounted() {\n    this.initCanvas();\n    this.startGame();\n    this.generateItems();\n  },\n  methods: {\n    initCanvas() {\n      this.canvas = this.$refs.gameCanvas;\n      this.context = this.canvas.getContext('2d');\n    },\n    startGame() {\n      this.update();\n      window.addEventListener('keydown', this.handleKeyDown);\n      window.addEventListener('keyup', this.handleKeyUp);\n    },\n    handleKeyDown(event) {\n      switch (event.key) {\n        case 'w':\n          this.player1.y -= this.player1.speed;\n          break;\n        case 's':\n          this.player1.y += this.player1.speed;\n          break;\n        case 'a':\n          this.player1.x -= this.player1.speed;\n          break;\n        case 'd':\n          this.player1.x += this.player1.speed;\n          break;\n        case 'f':\n          this.player1.isShooting = true;\n          break;\n        case 'ArrowUp':\n          this.player2.y -= this.player2.speed;\n          break;\n        case 'ArrowDown':\n          this.player2.y += this.player2.speed;\n          break;\n        case 'ArrowLeft':\n          this.player2.x -= this.player2.speed;\n          break;\n        case 'ArrowRight':\n          this.player2.x += this.player2.speed;\n          break;\n      }\n    },\n    handleKeyUp(event) {\n      if (event.key === 'f') {\n        this.player1.isShooting = false;\n      }\n    },\n    update() {\n      this.clearCanvas();\n      this.moveBullets();\n      this.drawItems();\n      this.drawPlayer(this.player1);\n      this.drawPlayer(this.player2);\n      this.checkCollisions();\n      this.handleShooting();\n      this.removeExpiredItems();\n      requestAnimationFrame(this.update);\n    },\n    drawPlayer(player) {\n      this.context.fillStyle = player.color;\n      this.context.fillRect(player.x, player.y, player.size, player.size);\n    },\n    moveBullets() {\n      this.player1.bullets.forEach(bullet => {\n        bullet.x += bullet.dx;\n        bullet.y += bullet.dy;\n      });\n      this.player1.bullets = this.player1.bullets.filter(bullet => {\n        return bullet.x >= 0 && bullet.x <= this.canvas.width &&\n            bullet.y >= 0 && bullet.y <= this.canvas.height;\n      });\n    },\n    handleShooting() {\n      if (this.player1.isShooting && this.player1.shootingCooldown <= 0) {\n        this.player1.bullets.push({\n          x: this.player1.x + this.player1.size / 2,\n          y: this.player1.y,\n          dx: 0,\n          dy: -10\n        });\n        this.player1.shootingCooldown = 30; // Cooldown frame count\n      }\n      this.player1.shootingCooldown = Math.max(0, this.player1.shootingCooldown - 1);\n      this.player1.bullets.forEach(bullet => {\n        this.context.fillStyle = 'black';\n        this.context.fillRect(bullet.x, bullet.y, 5, 10);\n      });\n    },\n    checkCollisions() {\n      this.player1.bullets.forEach(bullet => {\n        if (this.isCollision(bullet, this.player2)) {\n          this.player2.armor -= 1;\n          bullet.isHit = true;\n        }\n      });\n      this.player1.bullets = this.player1.bullets.filter(bullet => !bullet.isHit);\n\n      this.items.forEach(item => {\n        if (this.isCollision(item, this.player1)) {\n          if (item.type === 'speed') {\n            this.player1.speed += 10;\n          } else if (item.type === 'armor') {\n            this.player2.armor += 1;\n          }\n          item.isCollected = true;\n        }\n      });\n      this.items = this.items.filter(item => !item.isCollected);\n    },\n    isCollision(obj1, obj2) {\n      return obj1.x < obj2.x + obj2.size &&\n          obj1.x + obj1.size > obj2.x &&\n          obj1.y < obj2.y + obj2.size &&\n          obj1.y + obj1.size > obj2.y;\n    },\n    generateItems() {\n      for (let i = 0; i < 10; i++) {\n        this.items.push({\n          x: Math.random() * (this.canvas.width - this.itemSize),\n          y: Math.random() * (this.canvas.height - this.itemSize),\n          size: this.itemSize,\n          type: this.itemTypes[Math.floor(Math.random() * this.itemTypes.length)]\n        });\n      }\n    },\n    drawItems() {\n      this.items.forEach(item => {\n        this.context.fillStyle = item.type === 'speed' ? 'green' : 'purple';\n        this.context.fillRect(item.x, item.y, item.size, item.size);\n      });\n    },\n    removeExpiredItems() {\n      // Cleanup items and other necessary operations can be done here\n    },\n    clearCanvas() {\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    window.removeEventListener('keyup', this.handleKeyUp);\n  }\n};\n</script>\n\n<style>\ncanvas {\n  border: 1px solid black;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}